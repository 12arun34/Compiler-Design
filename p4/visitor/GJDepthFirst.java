//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.sound.sampled.Line;

 

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
  
   int LineCount= 0;
   int flag=0;                      // label not in jump
   HashMap<String, Integer> LevelMap = new HashMap<>();
   HashMap<Integer, HashMap<String, Integer>> mymap = new HashMap<>();
   
   //Globals for Use and Def
   Map<Integer, List<String>> UseMap = new HashMap<>();
   Map<Integer, List<String>> DefMap = new HashMap<>();

   int flagSimpleExp=0;          // temp 
   int flagCall =0;

   List<String> useList = new ArrayList<>();
   List<String> defList = new ArrayList<>();
   String var="";
   String varNumber;
   
   List<Object> mixedList = new ArrayList<>();

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      LineCount++;
      // System.out.println("Main use list on line: "+LineCount+" "+useList);
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f1.accept(this, argu);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f2.accept(this, argu);
      LineCount++;
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("Total lines is: "+LineCount);
      // for (int i = 1; i <= LineCount ; i++) {
      //          System.out.println("List " + i + ": " + DefMap.get(i));
      //      }
      // for (int i = 1; i <= LineCount ; i++) {
      //    System.out.println("List " + i + ": " + UseMap.get(i));
      // }
      mymap.put(LineCount,LevelMap);
      mixedList.add(mymap);
      mixedList.add(DefMap);
      mixedList.add(UseMap);
      _ret = (R) mixedList;
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f0.accept(this, argu);
      // LineCount++;
      n.f1.accept(this, argu);

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      LineCount++;
      n.f0.accept(this, argu);
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      flag=1;
      useList.add(var);
      n.f2.accept(this, argu);
      flag=0;
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      flag=1;
      n.f1.accept(this, argu);
      flag=0;
      // useList.add(var);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      useList.add(var);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      useList.add(var);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      defList.add(var);
      n.f2.accept(this, argu);
      useList.add(var);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      defList.add(var);
      // System.out.println("def done of "+var +" at line "+LineCount);
      n.f2.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      LineCount++;
      
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      LineCount++;
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      n.f4.accept(this, argu);
      LineCount++;
      UseMap.put(LineCount,useList);
      DefMap.put(LineCount,defList);
      useList = new ArrayList<>();
      defList = new ArrayList<>();
      
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      flagCall=1;
      n.f3.accept(this, argu);
      flagCall=0;
      n.f4.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      useList.add(var);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      flag=1;
      flagSimpleExp=1;
      n.f0.accept(this, argu);
      flagSimpleExp=0;
      flag=0;
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = n.f0.tokenImage;
      n.f1.accept(this, argu);
      var = s+varNumber;
      // System.out.println("temp= "+var+" flagSimpleEx= "+flagSimpleExp);
      if(flagSimpleExp==1){                 // temp in simpleExp
         useList.add(var);
         // System.out.println("simple exp temp at line "+LineCount+" name is "+var+" flagSimpleexp= "+flagSimpleExp);

         flagSimpleExp=0;
      }
      if(flagCall==1){                      // temp in call
         useList.add(var);
      }
      
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      // if(flagSimpleExp==0){
       varNumber=n.f0.tokenImage;
      // }
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      if(flag==0){
        LineCount++;
        LevelMap.put(n.f0.tokenImage, LineCount);
      //   clear

        UseMap.put(LineCount,useList);
        DefMap.put(LineCount,defList);
        useList = new ArrayList<>();
      defList = new ArrayList<>();
         //  System.out.println(LineCount+" "+n.f0.tokenImage);
      }
      // LineCount++;
      return _ret;
   }

}
