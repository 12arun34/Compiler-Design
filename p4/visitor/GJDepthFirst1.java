//
// Generated by JTB 1.3.2
//

package visitor;

import syntaxtree.*;
import java.util.*;

import javax.sound.sampled.Line;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order. Your visitors may extend this class.
 */
public class GJDepthFirst1<R, A> implements GJVisitor<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   // List<Integer>[] arrayOfSucceessorLists = new ArrayList[LineCount+1];
   Map<Integer, List<Integer>> arrayOfSucceessorLists = new HashMap<>();

   int LineNumber = 0;
   int LineCount;
   int flag = 0;
   String label = "";
   HashMap<String, Integer> LevelMap = new HashMap<>();
   HashMap<Integer, HashMap<String, Integer>> mymap = new HashMap<>();
   Map<Integer, List<String>> UseMap = new HashMap<>();
   Map<Integer, List<String>> DefMap = new HashMap<>();
   Map<Integer, List<String>> InMap = new HashMap<>();
   Map<Integer, List<String>> OutMap = new HashMap<>();
   Map<Integer, List<String>> InNewMap = new HashMap<>();
   Map<Integer, List<String>> OutNewMap = new HashMap<>();

   List<Object> mixedList = new ArrayList<>();

   public R visit(NodeList n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      mixedList = (List<Object>) argu;
      int ii = 1;
      for (Object element : mixedList) {
         if (ii == 1) {

            mymap.putAll((HashMap<Integer, HashMap<String, Integer>>) element);
            ii = 2;
         } else if (ii == 2) {

            DefMap.putAll((Map<Integer, List<String>>) element);
            ii = 3;
         } else {

            UseMap.putAll((Map<Integer, List<String>>) element);
         }
      }
      Integer LineCount = mymap.keySet().iterator().next();
      LevelMap.putAll(mymap.get(LineCount));
      // for (Map.Entry<String, Integer> entry : LevelMap.entrySet()) {
      // System.out.println("Key: " + entry.getKey() + ", Value: " +
      // entry.getValue());
      // }
      R _ret = null;
      n.f0.accept(this, argu);
      LineNumber++;
      // arrayOfSucceessorLists[LineNumber].add(LineNumber+1);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      LineNumber++;
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      // System.out.println("Total lines is: "+LineNumber);
      for (int i = 1; i <= LineCount - 1; i++) {
         if (!arrayOfSucceessorLists.containsKey(i)) {
            List<Integer> list = new ArrayList<>();
            list.add(i + 1);
            arrayOfSucceessorLists.put(i, list);
         }
      }

      List<Integer> list = new ArrayList<>();
      arrayOfSucceessorLists.put(LineCount, list);
      // for (int i = 1; i <= LineCount; i++) {
      // System.out.println("List " + i + ": " + arrayOfSucceessorLists.get(i));
      // }
      // for (int i = 1; i <= LineCount; i++) {
      // System.out.println("List " + i + ": " + DefMap.get(i));
      // }
      // for (int i = 1; i <= LineCount; i++) {
      // System.out.println("List " + i + ": " + UseMap.get(i));
      // }
      // ----------calcultion for IN and OUT

      List<String> list1 = new ArrayList<>();
      List<String> list2 = new ArrayList<>();
      for (int j = 1; j <= LineCount; j++) {
         InMap.put(j, list1);
         OutMap.put(j, list1);
      }
      list1 = new ArrayList<>();
            list2 = new ArrayList<>();
      boolean condition = true;

      while (condition) {

         for (int k =1; k <= LineCount; k++) {
            list1 = new ArrayList<>();
            list2 = new ArrayList<>();

            list1.addAll(InMap.get(k));
            list2.addAll(OutMap.get(k));
            InNewMap.put(k, list1);
            OutNewMap.put(k, list2);

            list1 = new ArrayList<>();
            list2 = new ArrayList<>();
            list1.addAll(OutMap.get(k));
            list1.removeAll(DefMap.get(k));
            list1.addAll(UseMap.get(k));
            // System.out.println("arun "+list1);
            // InMap.put(k, list2);
            InMap.put(k, list1);
            // System.out.println("kkkkk"+InMap.get(k));
            List<Integer> temp = new ArrayList<>();
            temp = arrayOfSucceessorLists.get(k);
            int size = temp.size();
            // System.out.println("size " + size);
            if (size == 1) {
               // System.out.println(" size 1--- ");
               list1 = new ArrayList<>();
               // System.out.println(" succccc "+(arrayOfSucceessorLists.get(k)).get(0));
               list1.addAll(InMap.get((arrayOfSucceessorLists.get(k)).get(0)));
               // list1.addAll(InMap.get(arrayOfSucceessorLists.get(k).get(1)));
               // System.out.println("list 1 inserted is "+list1);
               OutMap.put(k, list1);
               // System.out.println("list out at: "+k+" is "+InMap.get((arrayOfSucceessorLists.get(k)).get(0)));
               list1 = new ArrayList<>();
            } else if (size == 2) {
               // System.out.println(" size +++++");
               OutMap.put(k, list2);
               list1 = new ArrayList<>();
               list1.addAll(InMap.get(arrayOfSucceessorLists.get(k).get(0)));
               list1.addAll(InMap.get(arrayOfSucceessorLists.get(k).get(1)));
               OutMap.put(k, list1);
               list1 = new ArrayList<>();
            } else {
               // System.out.println(" size ppppp ");
               OutMap.put(k, list2);
            }

         } // inner loop
         condition = false;
         for (int t = 1; t <= LineCount; t++) {
            if (!InNewMap.get(t).equals(InMap.get(t))) {
               condition = true;
               break;
            }
            //list1 = new ArrayList<>();
            //list1.addAll(InMap.get(t));
            //list1.retainAll(OutNewMap.get(t));
            if (!OutNewMap.get(t).equals(OutMap.get(t))) {
               condition = true;
               break;
            }
            // System.out.println("equality in line : "+t);
            // System.out.println(InNewMap.get(t));
            // System.out.println(OutNewMap.get(t));

         }

      }

      for (int i = 1; i <= LineCount; i++) {
         System.out.println("List in " + i + ": " + InMap.get(i));
      }
      for (int i = 1; i <= LineCount; i++) {
         System.out.println("List out " + i + ": " + OutMap.get(i));
      }

      //-------CALCULTING LIVE RANGE 

      Set<String>VarList = new HashSet<>();
      for (int i = 1; i <= LineCount; i++) {
         VarList.addAll(InMap.get(i));
         VarList.addAll(OutMap.get(i));
      }
       int p=1;
      for (String element : VarList) {
         System.out.println("Variable  " + p + ": " + element);
         p++;
      }

      

      // ----------------
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      // LineNumber++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    * | ErrorStmt()
    * | CJumpStmt()
    * | JumpStmt()
    * | HStoreStmt()
    * | HLoadStmt()
    * | MoveStmt()
    * | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret = null;
      LineNumber++;
      n.f0.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret = null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      flag = 1;
      n.f2.accept(this, argu);
      flag = 0;
      List<Integer> list = new ArrayList<>();
      list.add(LineNumber + 1);
      list.add(LevelMap.get(label));
      arrayOfSucceessorLists.put(LineNumber, list);

      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      flag = 1;
      n.f1.accept(this, argu);
      flag = 0;
      List<Integer> list = new ArrayList<>();
      list.add(LevelMap.get(label));
      arrayOfSucceessorLists.put(LineNumber, list);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Call()
    * | HAllocate()
    * | BinOp()
    * | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      LineNumber++;
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      n.f3.accept(this, argu);
      LineNumber++;
      n.f4.accept(this, argu);
      LineNumber++;
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "LE"
    * | "NE"
    * | "PLUS"
    * | "MINUS"
    * | "TIMES"
    * | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    * | IntegerLiteral()
    * | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret = null;
      flag = 1;
      n.f0.accept(this, argu);
      flag = 0;
      return _ret;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      label = n.f0.tokenImage;
      if (flag == 0) {
         LineNumber++;
         // arrayOfSucceessorLists[LineNumber].add(LineNumber+1);
         // LevelMap.put(n.f0.tokenImage,LineNumber);
         // System.out.println(LineNumber+" "+n.f0.tokenImage);
      }
      // LineNumber++;
      return _ret;
   }

}
